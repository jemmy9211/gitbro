#!/bin/bash

command_exists() {
    command -v "$1" &> /dev/null
}

SCRIPT_PATH=$(realpath "$0")
PROJECT_ROOT=$(dirname $(dirname "$SCRIPT_PATH"))
VENV_PATH="$PROJECT_ROOT/venv"

if [ ! -d "$VENV_PATH" ]; then
    echo "Virtual environment not found at $VENV_PATH. Please run ./install.sh from the project root."
    exit 1
fi

source "$VENV_PATH/bin/activate"

if ! command_exists python3; then
    echo "Python3 not found in the virtual environment. Please ensure the setup is correct."
    deactivate
    exit 1
fi

# Check if this is a setup command
if [[ "$1" == "--setup" ]] || [[ "$1" == "--status" ]] || [[ "$1" == "--provider" ]]; then
    python3 "$PROJECT_ROOT/src/generate_message.py" "$@"
    exit_code=$?
    deactivate
    exit $exit_code
fi

# Check if a provider is configured before proceeding
temp_stderr_file=$(mktemp)
check_result=$(python3 "$PROJECT_ROOT/src/generate_message.py" --status 2> "$temp_stderr_file")
check_exit_code=$?
rm -f "$temp_stderr_file"

if [[ $check_exit_code -ne 0 ]] || [[ $check_result == *"None"* ]]; then
    echo "No AI provider is configured. Please set up a provider first:"
    echo ""
    echo "Available providers:"
    echo "  1. OpenAI (GPT models) - Requires API key"
    echo "  2. Google Gemini - Requires API key"
    echo "  3. Anthropic Claude - Requires API key"
    echo "  4. Ollama (Local models) - No API key required"
    echo ""
    echo "Run one of these commands to get started:"
    echo "  ./bin/ollamacommit --setup           # Interactive setup"
    echo "  ./bin/ollamacommit --setup openai    # Setup OpenAI"
    echo "  ./bin/ollamacommit --setup gemini    # Setup Gemini"
    echo "  ./bin/ollamacommit --setup claude    # Setup Claude"
    echo "  ./bin/ollamacommit --setup ollama    # Setup Ollama"
    deactivate
    exit 1
fi

# Main commit message generation flow
while true; do
    temp_stderr_file=$(mktemp)
    commit_message=$(python3 "$PROJECT_ROOT/src/generate_message.py" 2> "$temp_stderr_file")
    exit_code=$?

    if [ $exit_code -ne 0 ]; then
        echo -e "\nError details from message generation script (stderr):"
        cat "$temp_stderr_file"
    fi
    rm -f "$temp_stderr_file"

    if [ $exit_code -ne 0 ] || [ -z "$commit_message" ]; then
        echo "Failed to generate a commit message. Common issues:"
        echo "- Check that changes are staged using 'git add'."
        echo "- Verify your API provider is configured correctly."
        echo "- For Ollama: Ensure it's running at http://localhost:11434."
        echo "- For cloud providers: Check your API key and quota."
        echo "- Review any specific error messages printed above."
        echo ""
        echo "To reconfigure your provider, run: ./bin/ollamacommit --setup"
        deactivate
        exit 1
    fi

    echo -e "\nGenerated commit message:\n$commit_message"
    echo -e "\nPlease choose an action:"
    echo "1) Accept and commit"
    echo "2) Regenerate with more creativity"
    echo "3) Cancel and exit"
    read -p "Enter your choice (1-3): " choice

    case $choice in
        1)
            git commit -m "$commit_message"
            commit_exit_code=$?
            if [ $commit_exit_code -eq 0 ]; then
                echo "Commit successful! Commit message: \"$commit_message\""
                PYTHONPATH="$PROJECT_ROOT/src" python3 -c "from generate_message import reset_creativity; reset_creativity()"
                break
            else
                echo "Error: Git commit command failed. Please check for issues like an empty commit message, Git hooks preventing the commit, or other Git-related problems."
                PYTHONPATH="$PROJECT_ROOT/src" python3 -c "from generate_message import reset_creativity; reset_creativity()"
                deactivate
                exit 1
            fi
            ;;
        2)
            echo "Regenerating commit message with increased creativity..."
            PYTHONPATH="$PROJECT_ROOT/src" python3 -c "from generate_message import increase_creativity; increase_creativity()"
            continue
            ;;
        3)
            echo "Operation canceled."
            PYTHONPATH="$PROJECT_ROOT/src" python3 -c "from generate_message import reset_creativity; reset_creativity()"
            break
            ;;
        *)
            echo "Invalid option, please try again."
            continue
            ;;
    esac
done

deactivate